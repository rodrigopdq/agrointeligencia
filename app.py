import streamlit as st
import requests
import base64
from io import BytesIO
import pandas as pd
import json

# Configura√ß√µes de URL
FNN_URL = "http://127.0.0.1:5001"
CNN_URL = "http://127.0.0.1:5002"
RNN_URL = "http://127.0.0.1:5003"

st.set_page_config(layout="wide")
st.title("üå± Agrointelig√™ncia MVP - Plataforma de Predi√ß√£o")

# ---------------------------------------------------------
# UTILS
# ---------------------------------------------------------
def call_api(url, endpoint, data):
    """Fun√ß√£o gen√©rica para chamar os endpoints de predi√ß√£o."""
    full_url = f"{url}{endpoint}"
    try:
        response = requests.post(full_url, json=data)
        response.raise_for_status() # Levanta erro para status 4xx/5xx
        return response.json(), None
    except requests.exceptions.ConnectionError:
        return None, f"Erro de Conex√£o: O servi√ßo Flask em {url} n√£o est√° rodando."
    except requests.exceptions.RequestException as e:
        return None, f"Erro da API ({response.status_code}): {response.text}"

# ---------------------------------------------------------
# FNN - Predi√ß√£o de Rendimento
# ---------------------------------------------------------
def fnn_tab():
    st.header("An√°lise de Solo/Clima (FNN)")
    st.subheader("Previs√£o de Rendimento Alto")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Insira os Dados de Campo:**")
        temperatura = st.slider("Temperatura (¬∞C)", 15.0, 35.0, 25.0, 0.1)
        umidade = st.slider("Umidade do Ar (%)", 40, 95, 65)
        chuva = st.slider("Chuva (mm)", 0, 200, 100)
        ph = st.slider("PH do Solo", 5.0, 7.5, 6.5, 0.1)

        input_data = {
            "temperatura": temperatura,
            "umidade": umidade,
            "chuva": chuva,
            "ph": ph
        }
        
        # Display dos dados inseridos
        st.markdown("---")
        st.json(input_data)


    with col2:
        if st.button("PREDIZER RENDIMENTO (FNN)", key="fnn_predict"):
            with st.spinner('Aguardando resposta do modelo...'):
                response_data, error = call_api(FNN_URL, "/predict/soil_data", input_data)
                
                if error:
                    st.error(error)
                elif response_data and response_data.get('status') == 'success':
                    label = response_data['prediction_label']
                    score = response_data['confidence_score']
                    
                    st.subheader("Resultado da Predi√ß√£o:")
                    
                    if label == "Rendimento Alto":
                        st.success(f"Predi√ß√£o: {label}")
                    else:
                        st.warning(f"Predi√ß√£o: {label}")

                    st.metric(label="Confian√ßa", value=f"{score*100:.2f}%")
                    st.write("O sistema prediz que estas condi√ß√µes de solo/clima levar√£o a um **Rendimento " + label.upper() + "**.")
                else:
                    st.error("Erro desconhecido na predi√ß√£o.")

# ---------------------------------------------------------
# CNN - Predi√ß√£o de Doen√ßa Foliar
# ---------------------------------------------------------
def cnn_tab():
    st.header("An√°lise de Imagem Foliar (CNN)")
    st.subheader("Classifica√ß√£o de Sa√∫de da Planta")
    
    uploaded_file = st.file_uploader("Carregue uma imagem de folha para an√°lise:", type=['png', 'jpg', 'jpeg'])
    
    if uploaded_file is not None:
        st.image(uploaded_file, caption='Imagem Carregada.', width=250)
        
        if st.button("PREDIZER DOEN√áA (CNN)", key="cnn_predict"):
            with st.spinner('Aguardando resposta do modelo...'):
                # 1. Convers√£o para Base64
                file_bytes = uploaded_file.getvalue()
                image_base64 = base64.b64encode(file_bytes).decode('utf-8')
                
                input_data = {"image_base64": image_base64}

                # 2. Chamada √† API
                response_data, error = call_api(CNN_URL, "/predict/leaf_image", input_data)
                
                if error:
                    st.error(error)
                elif response_data and response_data.get('status') == 'success':
                    label = response_data['prediction_label']
                    score = response_data['confidence_score']

                    st.subheader("Resultado da Predi√ß√£o:")
                    
                    if label == "Saud√°vel":
                        st.success(f"Diagn√≥stico: {label}")
                        st.balloons()
                    else:
                        st.error(f"Diagn√≥stico: {label}")

                    st.metric(label="Confian√ßa (Prob. de ser Doente)", value=f"{score*100:.2f}%")
                    
                    if label == "Doente":
                         st.markdown(f"**Aten√ß√£o:** A imagem apresenta sinais de doen√ßa com **{score*100:.2f}%** de confian√ßa.")
                    else:
                         st.markdown("A folha parece estar saud√°vel.")
                else:
                    st.error("Erro desconhecido na predi√ß√£o.")

# ---------------------------------------------------------
# RNN - Classifica√ß√£o de Notas de Campo
# ---------------------------------------------------------
def rnn_tab():
    st.header("An√°lise de Notas de Campo (RNN/LSTM)")
    st.subheader("Classifica√ß√£o de Urg√™ncia")
    
    note_text = st.text_area("Insira a nota de campo do agr√¥nomo/t√©cnico:", 
                             "O solo na √°rea rec√©m-plantada est√° compactando muito rapidamente. Requer subsolagem urgente.")
    
    input_data = {"nota": note_text}
    st.markdown("---")
    st.json(input_data)
    
    if st.button("PREDIZER URG√äNCIA (RNN)", key="rnn_predict"):
        with st.spinner('Aguardando resposta do modelo...'):
            response_data, error = call_api(RNN_URL, "/predict/note", input_data)
            
            if error:
                st.error(error)
            elif response_data and response_data.get('status') == 'success':
                label = response_data['prediction_label']
                score = response_data['confidence_score']
                
                st.subheader("Resultado da Predi√ß√£o:")
                
                if label == "Urgente":
                    st.error(f"Prioridade: {label}")
                else:
                    st.info(f"Prioridade: {label}")

                st.metric(label="Confian√ßa (Prob. de ser Urgente)", value=f"{score*100:.2f}%")
                
                if label == "Urgente":
                    st.markdown("**Recomenda√ß√£o:** A nota exige aten√ß√£o imediata.")
                else:
                    st.markdown("A nota pode ser tratada dentro da rotina normal.")
            else:
                st.error("Erro desconhecido na predi√ß√£o.")


# ---------------------------------------------------------
# NAVEGA√á√ÉO PRINCIPAL
# ---------------------------------------------------------
tab1, tab2, tab3 = st.tabs(["FNN - Solo", "CNN - Imagem", "RNN - Texto"])

with tab1:
    fnn_tab()

with tab2:
    cnn_tab()

with tab3:
    rnn_tab()

st.sidebar.title("Instru√ß√µes de Execu√ß√£o")
st.sidebar.markdown("""
1.  **Iniciar os 3 Servi√ßos Flask:**
    Abra 3 terminais separados e execute:
    - `python fnn_service/api.py` (Porta 5001)
    - `python cnn_service/api.py` (Porta 5002)
    - `python rnn_service/api.py` (Porta 5003)

2.  **Iniciar o Dashboard Streamlit:**
    No quarto terminal (na pasta raiz), execute:
    - `streamlit run app.py`

3.  **Teste o Sistema:**
    Use as abas para enviar dados de solo, imagens e texto para os modelos treinados.
""")